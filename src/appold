/* eslint-disable @typescript-eslint/no-unused-vars */
import React, { useEffect, useState } from "react";
import { Vote, Trophy, Users, BarChart3, UserPlus, Trash, Edit } from "lucide-react";
import {
  connectWallet,
  getCandidates,
  vote,
  getWinner,
  addUser,
  editUser,
  deleteUser,
  addCandidate,
  editCandidate,
  deleteCandidate,
  changeOwner,
} from "../build/blockchain";

function App() {
  const [candidates, setCandidates] = useState<
    { name: string; voteCount: number; index: number }[]
  >([]);
  const [users, setUsers] = useState<{ address: string; name: string }[]>([]);
  const [hasVoted, setHasVoted] = useState(false);
  const [selectedCandidate, setSelectedCandidate] = useState<number | null>(null);
  const [totalVotes, setTotalVotes] = useState(0);
  const [winner, setWinner] = useState<{ name: string; votes: number } | null>(null);
  const [newUser, setNewUser] = useState("");
  const [userName, setUserName] = useState("");
  const [owner, setOwner] = useState("");
  const [newCandidate, setNewCandidate] = useState("");
  const [editName, setEditName] = useState("");
  const [editIndex, setEditIndex] = useState<number | null>(null);

  useEffect(() => {
    fetchCandidates();
    loadLocalData();
  }, []);
  
  function saveLocalData() {
    localStorage.setItem("candidates", JSON.stringify(candidates));
    localStorage.setItem("users", JSON.stringify(users));
  }

  function loadLocalData() {
    const savedCandidates = localStorage.getItem("candidates");
    const savedUsers = localStorage.getItem("users");
    if (savedCandidates) setCandidates(JSON.parse(savedCandidates));
    if (savedUsers) setUsers(JSON.parse(savedUsers));
  }

  async function fetchCandidates() {
    const data = await getCandidates();
    if (data) {
      setCandidates(data);
      setTotalVotes(data.reduce((sum: number, candidate: { voteCount: number }) => sum + candidate.voteCount, 0));
      saveLocalData();
    }
  }

  async function handleVote(index: number) {
    await vote(index);
    setHasVoted(true);
    fetchCandidates();
  }

  async function fetchWinner() {
    const winnerData = await getWinner();
    if (winnerData) setWinner(winnerData);
  }

  async function handleAddUser() {
    if (newUser && userName) {
      await addUser(newUser, userName);
      setUsers([...users, { address: newUser, name: userName }]);
      setNewUser("");
      setUserName("");
      saveLocalData();
    }
  }

  async function handleEditUser() {
    if (newUser && userName) {
      await editUser(newUser, userName);
      setUsers(users.map(user => user.address === newUser ? { ...user, name: userName } : user));
      setNewUser("");
      setUserName("");
      saveLocalData();
    }
  }

  async function handleDeleteUser(address: string) {
    await deleteUser(address);
    setUsers(users.filter(user => user.address !== address));
    saveLocalData();
  }

  async function handleAddCandidate() {
    if (newCandidate) {
      await addCandidate(newCandidate);
      setNewCandidate("");
      fetchCandidates();
      saveLocalData();
    }
  }

  async function handleEditCandidate() {
    if (editIndex !== null && editName) {
      await editCandidate(editIndex, editName);
      setEditIndex(null);
      setEditName("");
      fetchCandidates();
      saveLocalData();
    }
  }

  async function handleDeleteCandidate(index: number) {
    await deleteCandidate(index);
    fetchCandidates();
    saveLocalData();
  }

  async function handleChangeOwner() {
    if (owner) {
      await changeOwner(owner);
      setOwner("");
    }
  }

  return (
    <div className="min-h-screen bg-gray-100 py-8">
      <div className="max-w-4xl mx-auto p-6 bg-white shadow-lg rounded-xl">
        <h1 className="text-3xl font-bold text-center mb-4">Voting System</h1>
        <button onClick={connectWallet} className="bg-purple-600 text-white px-4 py-2 rounded-lg mb-4 w-full">
          Connect Wallet
        </button>

        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-3">Candidates</h2>
          {candidates.map((candidate, index) => (
            <div key={index} className="flex justify-between items-center p-2 border rounded-lg mb-2">
              <span>{candidate.name} - {candidate.voteCount} votes</span>
              <div>
                <button onClick={() => handleDeleteCandidate(index)} className="text-red-500 px-2"><Trash size={16} /></button>
              </div>
            </div>
          ))}
          <input type="text" placeholder="New Candidate" className="p-2 border rounded mr-2" value={newCandidate} onChange={(e) => setNewCandidate(e.target.value)} />
          <button onClick={handleAddCandidate} className="bg-green-600 text-white px-4 py-2 rounded-lg">Add</button>
        </div>

        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-3">Vote</h2>
          {candidates.map((candidate, index) => (
            <button key={index} onClick={() => handleVote(index)} className="block w-full text-left p-2 border rounded-lg mb-2">
              {candidate.name}
            </button>
          ))}
        </div>

        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-3">Manage Users</h2>
          {users.map((user, index) => (
            <div key={index} className="flex justify-between items-center p-2 border rounded-lg mb-2">
              <span>{user.name} ({user.address})</span>
              <button onClick={() => handleEditUser()} className="text-red-500 px-2"><Edit size={16} /></button>
              <button onClick={() => handleDeleteUser(user.address)} className="text-red-500 px-2"><Trash size={16} /></button>
            </div>
          ))}
          <input type="text" placeholder="User Address" className="p-2 border rounded mr-2" value={newUser} onChange={(e) => setNewUser(e.target.value)} />
          <input type="text" placeholder="User Name" className="p-2 border rounded mr-2" value={userName} onChange={(e) => setUserName(e.target.value)} />
          <button onClick={handleAddUser} className="bg-green-600 text-white px-4 py-2 rounded-lg mr-2">Add</button>
          <button onClick={handleEditUser} className="bg-blue-600 text-white px-4 py-2 rounded-lg mr-2">Edit</button>
        </div>
        <div>
          <h2 className="text-xl font-semibold mb-3">Transfer Ownership</h2>
          <input type="text" placeholder="New Owner Address" className="p-2 border rounded mr-2" value={owner} onChange={(e) => setOwner(e.target.value)} />
          <button onClick={handleChangeOwner} className="bg-red-600 text-white px-4 py-2 rounded-lg">Transfer</button>
        </div>
        <div className="space-y-12">
              <div className="bg-white rounded-xl shadow-lg p-6">
                <div className="flex items-center gap-2 mb-6">
                  <Trophy className="h-6 w-6 text-yellow-500" />
                  <h2 className="text-xl font-semibold">Current Leader</h2>
                </div>
                <div className="text-center">
                  {winner ? (
                    <>
                      <p className="text-2xl font-bold text-gray-900">{winner.name}</p>
                      <p className="text-purple-600 font-medium">{winner.votes} votes</p>
                    </>
                  ) : (
                    <button onClick={fetchWinner} className="bg-blue-600 text-white px-4 py-2 rounded-lg">
                      Get Winner
                    </button>
                  )}
                </div>
              </div>
            </div>
      </div>
      
    </div>
  );
}

export default App;






/* eslint-disable @typescript-eslint/no-explicit-any */
import { ethers } from "ethers";

const contractAddress = "0xf7399984752fc91800CDde89A019f01b5C9F4801";

const contractABI =[
    {
        "inputs": [
            {
                "internalType": "string[]",
                "name": "_candidateNames",
                "type": "string[]"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "string",
                "name": "name",
                "type": "string"
            }
        ],
        "name": "CandidateAdded",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "index",
                "type": "uint256"
            }
        ],
        "name": "CandidateDeleted",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "index",
                "type": "uint256"
            },
            {
                "indexed": false,
                "internalType": "string",
                "name": "newName",
                "type": "string"
            }
        ],
        "name": "CandidateEdited",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "OwnerChanged",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "address",
                "name": "user",
                "type": "address"
            },
            {
                "indexed": false,
                "internalType": "string",
                "name": "name",
                "type": "string"
            }
        ],
        "name": "UserAdded",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "address",
                "name": "user",
                "type": "address"
            }
        ],
        "name": "UserDeleted",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "address",
                "name": "user",
                "type": "address"
            },
            {
                "indexed": false,
                "internalType": "string",
                "name": "newName",
                "type": "string"
            }
        ],
        "name": "UserEdited",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": false,
                "internalType": "address",
                "name": "voter",
                "type": "address"
            },
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "candidateIndex",
                "type": "uint256"
            }
        ],
        "name": "Voted",
        "type": "event"
    },
    {
        "inputs": [
            {
                "internalType": "string",
                "name": "_name",
                "type": "string"
            }
        ],
        "name": "addCandidate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "_user",
                "type": "address"
            },
            {
                "internalType": "string",
                "name": "_name",
                "type": "string"
            }
        ],
        "name": "addUser",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "candidates",
        "outputs": [
            {
                "internalType": "string",
                "name": "name",
                "type": "string"
            },
            {
                "internalType": "uint256",
                "name": "voteCount",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
            }
        ],
        "name": "changeOwner",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "index",
                "type": "uint256"
            }
        ],
        "name": "deleteCandidate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "_user",
                "type": "address"
            }
        ],
        "name": "deleteUser",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "index",
                "type": "uint256"
            },
            {
                "internalType": "string",
                "name": "newName",
                "type": "string"
            }
        ],
        "name": "editCandidate",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "_user",
                "type": "address"
            },
            {
                "internalType": "string",
                "name": "newName",
                "type": "string"
            }
        ],
        "name": "editUser",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getCandidates",
        "outputs": [
            {
                "components": [
                    {
                        "internalType": "string",
                        "name": "name",
                        "type": "string"
                    },
                    {
                        "internalType": "uint256",
                        "name": "voteCount",
                        "type": "uint256"
                    }
                ],
                "internalType": "struct Voting.Candidate[]",
                "name": "",
                "type": "tuple[]"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "getWinner",
        "outputs": [
            {
                "internalType": "string",
                "name": "winnerName",
                "type": "string"
            },
            {
                "internalType": "uint256",
                "name": "winnerVotes",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "name": "hasVoted",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "name": "isUser",
        "outputs": [
            {
                "internalType": "bool",
                "name": "",
                "type": "bool"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "owner",
        "outputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "name": "users",
        "outputs": [
            {
                "internalType": "address",
                "name": "userAddress",
                "type": "address"
            },
            {
                "internalType": "string",
                "name": "name",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "uint256",
                "name": "candidateIndex",
                "type": "uint256"
            }
        ],
        "name": "vote",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }
] as const ; 

declare global {
  interface Window {
    ethereum?: any;
  }
}

export async function connectWallet() {
  if (!window.ethereum) {
    alert("Please install MetaMask!");
    return null;
  }

  const provider = new ethers.BrowserProvider(window.ethereum);
  const signer = await provider.getSigner();
  return signer;
}

export async function getContract(signer: ethers.JsonRpcSigner) {
  return new ethers.Contract(contractAddress, contractABI, signer);
}

export async function getCandidates() {
  try {
    const signer = await connectWallet();
    if (!signer) return [];
    
    const contract = await getContract(signer);
    
    const candidates = await contract.getCandidates();
    return candidates.map((candidate: { name: string; voteCount: bigint }, index: number) => ({
      name: candidate.name,
      voteCount: Number(candidate.voteCount),
      index,
    }));
  } catch (error:any) {
    console.error("Error fetching candidates:", error.message);
    return [];
  }
}

export async function vote(candidateIndex: number) {
  try {
    const signer = await connectWallet();
    if (!signer) return;
    
    const contract = await getContract(signer);
    const tx = await contract.vote(candidateIndex);
    await tx.wait();
    console.log("Vote submitted for candidate index:", candidateIndex);
  } catch (error) {
    console.error("Error voting:", error);
  }
}

export async function getWinner() {
  try {
    const signer = await connectWallet();
    if (!signer) return null;
    
    const contract = await getContract(signer);
    
    const [winnerName, winnerVotes] = await contract.getWinner();
    return { name: winnerName, votes: Number(winnerVotes) };
  } catch (error) {
    console.error("Error fetching winner:", error);
    return null;
  }
}

export async function addUser(userAddress: string, name: string) {
  try {
    const signer = await connectWallet();
    if (!signer) return;

    const contract = await getContract(signer);
    const tx = await contract.addUser(userAddress, name);
    await tx.wait();
    console.log("User added:", userAddress);
  } catch (error) {
    console.error("Error adding user:", error);
  }
}

export async function deleteUser(userAddress: string) {
  try {
    const signer = await connectWallet();
    if (!signer) return;

    const contract = await getContract(signer);
    const tx = await contract.deleteUser(userAddress);
    await tx.wait();
    console.log("User deleted:", userAddress);
  } catch (error) {
    console.error("Error deleting user:", error);
  }
}
export async function editUser(userAddress: string, newName: string) {
    try {
      const signer = await connectWallet();
      if (!signer) return;
  
      const contract = await getContract(signer);
      const tx = await contract.editUser(userAddress, newName);
      await tx.wait();
      console.log("User edited:", userAddress, "New Name:", newName);
    } catch (error) {
      console.error("Error editing user:", error);
    }
  }
  
export async function addCandidate(name: string) {
  try {
    const signer = await connectWallet();
    if (!signer) return;

    const contract = await getContract(signer);
    const tx = await contract.addCandidate(name);
    await tx.wait();
    console.log("Candidate added:", name);
  } catch (error) {
    console.error("Error adding candidate:", error);
  }
}

export async function editCandidate(index: number, newName: string) {
  try {
    const signer = await connectWallet();
    if (!signer) return;

    const contract = await getContract(signer);
    const tx = await contract.editCandidate(index, newName);
    await tx.wait();
    console.log("Candidate edited:", newName);
  } catch (error) {
    console.error("Error editing candidate:", error);
  }
}

export async function deleteCandidate(index: number) {
  try {
    const signer = await connectWallet();
    if (!signer) return;

    const contract = await getContract(signer);
    const tx = await contract.deleteCandidate(index);
    await tx.wait();
    console.log("Candidate deleted at index:", index);
  } catch (error) {
    console.error("Error deleting candidate:", error);
  }
}

export async function changeOwner(newOwner: string) {
  try {
    const signer = await connectWallet();
    if (!signer) return;

    const contract = await getContract(signer);
    const tx = await contract.changeOwner(newOwner);
    await tx.wait();
    console.log("Ownership transferred to:", newOwner);
  } catch (error) {
    console.error("Error changing owner:", error);
  }
}
